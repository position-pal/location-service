# =================================================================================================
# An Akka configuration for testing the service locally with one single replica, hardcoded seed
# nodes and a not secure cassandra configuration. This should not be used in production
# =================================================================================================
include "serialization"
akka {
  loglevel = INFO
  license-key = ${AKKA_LICENSE_KEY}
  actor {
    provider = cluster
  }
  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      port = 2551
    }
  }
  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:2551"
    ]
  }
  coordinated-shutdown.exit-jvm = on
  persistence {
    journal.plugin = "akka.persistence.cassandra.journal"
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
    journal.auto-start-journals = ["akka.persistence.cassandra.journal"]
    cassandra {
      events-by-tag {
        bucket-size = "Hour"
        eventual-consistency-delay = 5s
        flush-interval = 50ms
        pubsub-notification = on
        # Tagged events are written into time buckets. The events by tag query walks the buckets in time order.
        # When there is no offset provided to a query then it is not known which bucket to start with.
        # It is important to override the first time bucket used to a recent time as the default will result in a
        # delay for queries without an offset as it is a long time ago
        first-time-bucket = "20240112T00:00"
      }
      query {
        refresh-interval = 2s
      }
      journal.keyspace = "locationservice"
      snapshot.keyspace = "locationservice"
    }
  }
  projection {
    cassandra.offset-store.keyspace = "locationservice"
    # use same Cassandra session config as for the journal
    cassandra.session-config-path = "akka.persistence.cassandra"
  }
  datastax-java-driver {
    basic {
      contact-points = [${CASSANDRA_CONTACT_POINT}]
    }
    advanced.auth-provider {
      class = PlainTextAuthProvider
      username = ${CASSANDRA_USERNAME}
      password = ${CASSANDRA_PASSWORD}
    }
    advanced.reconnect-on-init = on
  }
  http {
    server.websocket.periodic-keep-alive-max-idle = 1 second
  }
}
